%!PS-Adobe-3.0
%%Pages: 1
%%EndComments
%%BoundingBox:  15 135 620 515

% put your sizes here:

/width  40 def
/height 25 def

% seed number here:

6 srand % put your seed number instead of 0 (normally not required)
systemdict /realtime known { realtime srand } if

% initialization

/size  width height mul def
/zone  size array def
/zsize size array def
/vert  width 1 add array def
/hor   height 1 add array def

/w1 width 1 sub def
/h1 height 1 sub def

0 1 size 1 sub { dup zsize exch 1 put zone exch dup put } bind for
0 1 width { vert exch height string 0 1 h1 
    { 1 index exch 155 put } for put } bind for
0 1 height { hor exch width string 0 1 w1 
    { 1 index exch 155 put } for put } bind for

% define subroutines

/db { dup 20 string cvs = } bind def

/find_set { { zone 1 index get dup 3 1 roll eq {exit} if } loop} bind def

/merge_sets {
  2 copy zsize exch get
  exch zsize exch get 2 copy gt
  3 1 roll add exch
    { zsize 2 index 3 -1 roll put
	zone 3 1 roll put  }
    { zsize 3 index 3 -1 roll put
	zone 3 1 roll exch put  }
  ifelse } bind def

%%EndSetup

%%Page: maze 1

% building

size 1 sub
{
    {
	rand 2 mod 0 eq 
	{
	    rand height mod
	    rand w1 mod 2 copy
	    height mul add
	    dup height add
	    find_set exch find_set
	    2 copy eq
	    {
		pop pop pop pop
	    }
	    {
		merge_sets vert exch 1 add get exch 0 put exit
	    }
	    ifelse
	}
	{
	    rand h1 mod
	    rand width mod 2 copy
	    height mul add
	    dup 1 add
	    find_set exch find_set
	    2 copy eq
	    {
		pop pop pop pop
	    }
	    {
		merge_sets exch hor exch 1 add get exch 0 put exit
	    }
	    ifelse	    
	}
	ifelse
    }
    loop
} bind repeat

% make entrance and exit

vert 0     get rand height mod 0 put
vert width get rand height mod 0 put

% setup output

%clippath pathbbox
35 55 600 600 
2 index sub exch    
3 index sub exch    
4 2 roll translate  

%2 copy height 4 add div exch width 4 add div
%2 copy gt {exch} if pop /myscale exch def
/myscale 15 def

myscale height mul sub 2.1 div exch
myscale width  mul sub 2 div exch 
translate

myscale myscale scale
0.2 setlinewidth
0.5 setgray

newpath

% render the maze

0 1 width { dup 0 moveto vert exch get 0 1 height 1 sub
 { 1 index exch get 0 eq 0 1 3 -1 roll { rmoveto } { rlineto } ifelse }
            for pop } bind for

0 1 height { dup 0 exch moveto hor exch get 0 1 width 1 sub
 { 1 index exch get 0 eq 1 0 3 -1 roll { rmoveto } { rlineto } ifelse }
            for pop } bind for

stroke

% eject the page

showpage

%%EOF

